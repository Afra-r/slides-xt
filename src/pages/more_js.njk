{% extends "layouts/main.njk" %}

{% block slides %}
<section>
    <h1>CMPUT 404</h1>
    <h3>Web Applications and Architecture</h3>
    <h2>More JavaScript</h2>
    <p>
        <small>Created by <br>
                Hazel Campbell (<a href="mailto:hazel.campbell@ualberta.ca">hazel.campbell@ualberta.ca</a>).<br> Copyright 2023.
        </small>
    </p>
</section>
<section>
    <h3>Modules</h3>
    <ul>
        <li>At some point it became necessary to split JS into multiple files.</li>
        <li>Originally you'd just use multiple <code>&lt;script> tags</code></li>
        <li>2009: CommonJS modules</li>
        <li>2016: ES modules (aka ES6 modules)</li>
    </ul>
</section>
<section>
    <h3>CommonJS modules</h3>
    <pre><code>{% filter prexample %}
        'use strict';
        module.exports.safeAdd = function(a, b) {
            const s = a + b;
            if (Number.isSafeInteger(s) && Number.isSafeInteger(a) && Number.isSafeInteger(b)) {
                return s;
            } else {
                throw Error("Numbers got too big!");
            }
        }
        module.exports.safeSubtract = function(a, b) {
            const s = a - b;
            if (Number.isSafeInteger(s) && Number.isSafeInteger(a) && Number.isSafeInteger(b)) {
                return s;
            } else {
                throw Error("Numbers got too big!");
            }
        }
    {% endfilter %}</code></pre>
</section>
<section>
    <h3>CommonJS modules</h3>
    <p>safety.js</p>
    <pre><code>{% filter prexample %}
        'use strict';
        const safeAdd = function(a, b) {
            // some code ...
        }
        const safeSubtract = function(a, b) {
            // some code ...
        }
        module.exports = { safeAdd, safeSubtract };
    {% endfilter %}</code></pre>
    <p>something else in the same folder...</p>
    <pre><code>{% filter prexample %}
        'use strict';
        const {safeAdd, safeSubtract} = require('./safety'); // note no .js
        console.log(safeAdd(2, 2));
    {% endfilter %}</code></pre>   
</section>
<section>
    <h3>ES Modules</h3>
    <p>safety.mjs</p>
    <pre><code>{% filter prexample %}
        // don't need use strict, its on by default in ES modules! 
        export function safeAdd(a, b) {
            // some code ...
        }
        export function safeSubtract(a, b) {
            // some code ...
        }
    {% endfilter %}</code></pre>
    <p>something else in the same folder...</p>
    <pre><code>{% filter prexample %}
        import {safeAdd, safeSubtract} from './safety.mjs'; // we do need the .mjs here
        console.log(safeAdd(2, 2));
    {% endfilter %}</code></pre>   
</section>
<section>
    <h3>ES Modules</h3>
    <p>Async loading...</p>
    <pre><code>{% filter prexample %}
        async function loadAndSubtract() {
            safety = await import("./safety.mjs");
            console.log(safety.safeAdd(2, 2));   
        }
    {% endfilter %}</code></pre>   
</section>
<section>
    <h3>Modules</h3>
    <ul>
        <li>use <code>.mjs</code> to tell Node and other libraries that it's an ES Module.</li>
        <li>use <code>.esm</code> or <code>.esm.js</code> are ES modules, but not recognized by Node.</li>
        <li>use <code>.cjs</code> to tell Node and other libraries that it's an CommonJS Module (rare).</li>
        <li>Both support full URLs, though if you're not using relative URLs you're setting yourself up for a security problem.</li>
    </ul>
</section>
<section>
    <h3>CommonJS Modules</h3>
    <ul>
        <li>Frontend code that uses CommonJS
            <ul><li>Needs library or bundler (RequireJS, Webpack, etc.) to work in browser.</li></ul>
        </li>
    </ul>
</section>
<section>
    <h3>ES Modules</h3>
    <ul>
        <li>Needs Node.js version 14 or better, supported natively in browser.</li>
        <li>You can use "top-level await" that is, <code>await</code> outside of an async function
            <ul>
                <li>This delays loading until the promise resolves</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>Transpilers & Bundlers</h3>
    <ul>
        <li>Examples:
            <ul>webpack (+babel)</ul>
            <ul>rollup</ul>
            <ul>esbuild</ul>
            <ul>...</ul>
        </li>
    </ul>
</section>
<section>
    <h3>Transpilers & Bundlers</h3>
    <ul>
        <li>Make JS load faster (maybe) by merging large trees of modules into single files
            <ul>
                <li>Also can combine CSS, image files, etc. into JavaScript</li>
            </ul>
        </li>
        <li>Support more modern features on older browsers
            <ul>
                <li>Original purpose of Babel was to compile ES6 to ES5</li>
            </ul>
        </li>
        <li>Compile a variety of languages (TypeScript, CoffeeScript...) to JavaScript</li>
    </ul>
</section>
<section>
    <h3>Transpilers & Bundlers</h3>
    <ul>
        <li>Avoid hosting your entire node_modules
            <ul>
                <li>Scans for dependencies</li>
            </ul>
        </li>
        <li>Automatically add hashes to files for cache-busting</li>
        <li>Interferes with debugging</li>
    </ul>
</section>
<section>
    <h3>Tree Shaking</h3>
    <ul>
        <li>Bundlers usually perform <i>Tree-Shaking</i></li>
        <li>Removing unused parts of modules and their dependencies</li>
        <li>The previous example only used safeAdd and safeSubtract, so all other exports would be removed</li>
    </ul>
</section>
<section>
    <h3>Polyfills</h3>
    <ul>
        <li>Bundlers often also automatically add polyfills</li>
        <li>JS script that adds support for newer features not supported in older browers</li>
        <li>Different from a transpiler!
            <ul>
                <li>Transpiler: runs before deployment during build</li>
                <li>Polyfill: runs in the browser at runtime</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>Polyfills vs Transpilers</h3>
    <ul>
        <li>Example:
            <ul>
                <li>Require.js is a polyfill for CommonJS module support</li>
                <li>rollup-plugin-commonjs transpiles CommonJS to ES Modules at build time</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3 style="font-size: 80%;">Debugging Transpiled/Bundled Frontents</h3>
    <ul>
        <li>Source maps!</li>
        <li>Like debugging symbols <code>gcc -g</code>, but for the web</li>
        <li>Produced to map the output html/css/js from transpilers, bundlers, minifiers, and templaters to the original source code</li>
        <li><code>//# sourceMappingURL=yourFileName.min.js.map</code></li>
        <li>Not perfect</li>
        <li>So far only supports JS and CSS</li>
    </ul>
</section>
<section>
    <h3>Spread operator</h3>
    <ul>
        <li><code>...</code></li>
        <li>When used in arguments: takes an array and turns it into arguments</li>
        <li>When used in parameters: takes the rest of the arguments passed in and turns it into an array</li>
        <li>When used in an array: takes an array and inserts its contents into the array</li>
    </ul>
</section>
<section>
    <h3>Spread operator</h3>
    <pre><code>{% filter prexample %}
        const f = (...a) => {
            // a is an array of all the arguments passed in
            console.log(...a); // give console.log multiple arguments 
            const b = [0, ...a]; // b is a new array with 0, then the elements from a
            console.log(...b);
        }
        f(1, 2, 3) // works just like console.log(1, 2, 3)
    {% endfilter %}</code></pre>
</section>
{% endblock %}