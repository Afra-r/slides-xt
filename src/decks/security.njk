{% extends "base.njk" %}

{% block slides %}
<section>
    <h1>CMPUT 404</h1>
    <h3>Web Applications and Architecture</h3>
    <h2>Web Security</h2>
    <p>
      <small>Created by <br>
        <a href="http://softwareprocess.es">Abram Hindle</a>
        (<a href="mailto:abram.hindle@ualberta.ca">abram.hindle@ualberta.ca</a>) <br>
        and Hazel Campbell (<a href="mailto:hazel.campbell@ualberta.ca">hazel.campbell@ualberta.ca</a>).<br>
        Copyright 2014-2023.
      </small>
    </p>
</section>
<section style="font-size: 90%;">
    <h3>Goals of Web Security</h3>
    <dl>
        <dt>Leak Prevention</dt>
        <dd>Prevent unauthorized access of information owned by the organization (business, school...)</dd>
        <dt>User Privacy</dt>
        <dd>Prevent unauthorized access of other user's information
            <ul>
                <li>Other users by logged-in users</li>
                <li>All users by logged-out users</li>
                <li>Legally required!</li>
            </ul>
        </dd>
    </dl>
</section>
<section style="font-size: 80%;">
    <h3>Goals of Web Security</h3>
    <dl>
        <dt>RCE on Server</dt>
        <dd>Prevent code that is unauthorized/unknown/dangerous/etc. from being run on the server by people outside of the organization/business.
            <ul>
            <li>Ransomware</li>
            <li>Miners</li>
            <li>Proxies & Botnets</li>
        </ul>
        </dd>
        <dt>XSS</dt>
        <dd><b>Cross</b> <b>S</b>ite <b>S</b>cripting. Unauthorized code or actions running on the <em>client</em>, usually the browser.
            <ul>
                <li>Reflected</li>
                <li>Persistent</li>
                <li>DOM-based</li>
                <li>Server</li>
                <li>Client</li>
            </ul>
        </dd>
    </dl>
</section>
<section style="font-size: 80%;">
    <h3>Goals of Web Security</h3>
    <dl>
        <dt>CSRF</dt>
        <dd><b>C</b>ross-<b>S</b>ite <b>R</b>equest <b>F</b>orgery.
            Any action that appears to be taken on an authorized user's behalf but isn't actually... including GET.
        </dd>
        <dt>SSRF</dt>
        <dd><b>S</b>erver-<b>S</b>ide <b>R</b>equest <b>F</b>orgery.
            Any action that appears to be taken on an authorized server/service's behalf but isn't actually... including GET.
        </dd>
        <dt>DoS</dt>
        <dd><b>D</b>enial <b>o</b>f <b>S</b>ervice.
            Anything that causes the web site or web service to be unable to serve its normal users.
        </dd>
    </dl>
</section>
<section>
    <h3>High-Value Targerts</h3>
    <ul>
        <li>Personal Information</li>
        <li>Private Information</li>
        <li>Ransom-able Information</li>
        <li>Compute Resources (Mining)</li>
        <li>Network Resources (Proxy/Botnets)</li>
    </ul>
</section>
<section>
    <h3>What's Getting Exploited</h3>
    <p>Mitre's <a href="https://cwe.mitre.org/top25/">Top 25</a> Weaknesses. (Includes non-Web weakenesses.)</p>
</section>
<section>
    <h3>Is your website supposed to...</h3>
    <ul>
        <li>Distribute malware/worms/viruses?</li>
        <li>Vouch for the identity of fraudsters?</li>
        <li>Send spam?</li>
        <li>Distribute pirated software/media?</li>
        <li>Run crypto-miners?</li>
        <li>Host pornography?</li>
        <li>Help attack other services?</li>
    </ul>
</section>
<section>
    <h3>XSS (Cross-Site Scripting)</h3>
    <ul>
        <li>Doesn't need to come from another site</li>
        <li>Inclusion of unauthorized HTML/CSS/JavaScript in page.</li>
        <li>Malicious code that runs in the <em>browser</em>.</li>
        <li>Malicous code that runs on the server is not XSS, it's RCE.</li>
    </ul>
</section>
<section>
    <h3>XSS Types</h3>
    <p>Where does the bad code come from?</p>
    <dl>
        <dt>Server</dt>
        <dd>URL navigation, <code>&lt;script></code>, <code>&lt;link</code>, <code>src=</code>, ...</dd>
        <dt>Client</dt>
        <dd>Bad code comes from an AJAX call.</dd>
        <dt>DOM</dt>
        <dd>When bad code is generated by code on the client that modifies the DOM.</dd>
    </dl>
</section>
<section>
    <h3>XSS Types</h3>
    <p>How long is the malicious code around?</p>
    <dl>
        <dt>Reflected (Type 1)</dt>
        <dd>Provided by a single server response as an immediate response to a malicious request.</dd>
        <dt>Persistent (Type 2)</dt>
        <dd>Provided by any number of server responses. The malicious code is stored on the server.</dd>
    </dl>
</section>
<section>
    <h3>XSS Types</h3>
    <table>
        <thead>
            <tr>
                <td></td>
                <td>Server</td>
                <td>Client</td>
                <td>DOM</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Reflected</td>
                <td>Reflected Server XSS</td>
                <td>Reflected Client XSS</td>
                <td>Reflected DOM XSS</td>
            </tr>
            <tr>
                <td>Stored</td>
                <td>Stored Server XSS</td>
                <td>Stored Client XSS</td>
                <td>Stored DOM XSS</td>
            </tr>
        </tbody>
    </table>
</section>
<section>
    <h3>Reflected Server XSS Example</h3>
    <ol>
        <li>Error page generated server side that complains about incorrect query parameters.</li>
        <li>Error page shows user their incorrect query parameters.</li>
        <li>Error page does not contents of query parameters from being interpreted by the browser as HTML/CSS/JS code.</li>
    </ol>
</section>
<section>
    <h3>Stored Server XSS Example</h3>
    <ol>
        <li>User profile page on server allows user to enter a description or bio for themselves.</li>
        <li>Bio is stored on server.</li>
        <li>Anyone navigating to the page sees the user's custom bio.</li>
        <li>Someone sets their bio to contain HTML/CSS/JS.</li>
    </ol>
</section>
<section>
    <h3>XSS and URLs</h3>
    <pre><code>{% filter prexample %}
        someAElement.href = "http://mysite.com/?q=" + searchQuery
    {% endfilter %}</code></pre>
    <p>What if it is changed to something like...</p>
</section>
<section>
    <h3>Server XSS Prevention</h3>
    <ul>
        <li>Check incoming POST/GET parameters, paths, & uploads for validity.
            <ul>
                <li>Should a user be able to enter their name as <code>&lt;script></code>?</li>
            </ul>
        </li>
        <li>Apply HTML/CSS/JS <em>escaping</em> to anything filled in.
            <ul>
                <li>Example: Use built-in library functions to change <code>&lt;</code> to <code>&amp;lt;</code> in HTML.</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>XSS Prevention</h3>
    <ul>
        <li>Avoid "unsafe sinks"
            <ul>
                <li><code>.innerHTML</code> (react: <code>dangerouslySetInnerHTML</code>)</li>
                <li><code>document.write()</code></li>
                <li><code>.onevent</code></li>
                <li><code>eval()</code></li>
                <li><code>setTimeout(string)/setInterval(string)</code></li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>XSS Prevention</h3>
    <ul>
        <li>Use safe sinks instead
            <ul>
                <li><code>.innerHTML</code> → <code>.textContent</code></li>
                <li><code>document.write()</code> → create elements the OO way</li>
                <li><code>.onevent</code> → <code>addEventListener</code></li>
                <li><code>eval()</code> → Just don't.</li>
                <li><code>setTimeout(string)/setInterval(string)</code> →</li>
            </ul>
        </li>
        <pre><code>{% filter prexample %}
            if (typeof somecode === 'function') {
                setTimeout(somecode);
            } else { throw new Error("Possible XSS?"); }
        {% endfilter %}</code></pre>
    </ul>
</section>
<section>
    <h3>Apply Escaping EVERYWHERE</h3>
    <ul>
        <li>Any time something is inserted by interpolation, templating, AJAX, etc. consider it could possbly be exploited.</li>
        <li>If its a <b>URL</b>, apply percent encoding to variables.
            <pre><code>{% filter prexample %}
                # Python example:
                dest = base_url + item_name + '?t=' + tracking_id
                # Instead:
                import quote from urllib.parse
                dest = base_url + quote(item_name) + '?t=' + quote(tracking_id)
            {% endfilter %}</code></pre>
        </li>
        <li>If it's being added to <b>HTML</b>, apply <em>entity encoding</em> to <code>&amp;&lt;&gt;&quot;&apos;</code> → <code>&amp;amp;&amp;lt;&amp;gt;&amp;quot;&amp;apos;</code></li>
    </ul>
</section>
<section>
    <h3>Apply Escaping EVERYWHERE</h3>
    <ul>
        <li>CSS
            <ul>
                <li>Make sure you only put variables into css values.</li>
                <li>Make sure values are quoted and escaped.
                    <pre><code>{% filter prexample %}
                        // JS Example
                        customized_style = "body { background-color: " + user_color + "}";
                        # Instead:
                        customized_style = "body { background-color: \"" + CSS.escape(user_color) + "\"}";
                    {% endfilter %}</code></pre>
                </li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>Apply Escaping EVERYWHERE</h3>
    <ul>
        <li>JavaScript
            <ul>
                <li>Best to just avoid ever interpolating something into JavaScript.</li>
                <li>Use an <a href="https://github.com/OWASP/owasp-java-encoder/blob/main/core/src/main/java/org/owasp/encoder/JavaScriptEncoder.java">encoder library.</a></li>
                <li>Place value in single quotes and convert every character to a hex code or unicode code.
                    <pre><code>{% filter prexample %}
                        # Python example
                        output_js = "someFunction('" + some_string + "');"
                        # should be changed to something like
                        output_js = "someFunction('" + ''.join(['\\u' + hex(ord(c)) for c in some_string]) +"');"
                    {% endfilter %}</code></pre>
                </li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>Lock it down!</h3>
    <ul>
        <li>HTTP: <code>Content-Security-Policy: default-src: 'self'; img-src https://*;</code></li>
        <li>HTML: <code>&lt;meta http-equiv="Content-Security-Policy" content="default-src: 'self'; img-src https://*;"></code></li>
        <li>Unlock inline CSS: <code>style-src: 'unsafe-inline';</code></li>
        <li><code>'self'</code> value means only other URLs on the same source (domain, http/https & port number) can be used.</li>
        <li>Only listing <code>'self'</code> prevents use of inline data.</li>
    </ul>
</section>
<section>
    <h3>CSP</h3>
    <ul>
        <li>Example <code>script-src: 'self'</code>:</li>
        <pre><code>{% filter prexample %}
            <script src="/scripts/banana.js"></script><!-- this one loads ok -->
            <script src="https://some.cdn.com/somelibrary.js"></script><!-- not allowed, different origin -->
            <script>
                alert("This one doesn't load, it's unsafe inline.");
            </script>
            <button onclick='alert("this one doesnt load either, unsafe inline")'>
        {% endfilter %}</code></pre>
    </ul>
</section>
<section>
    <h3>CSP</h3>
    <ul>
        <li>General approach
            <ol>
                <li>Set <code>'default-src: self;'</code> and see what breaks.</li>
                <li>Add exceptions as needed<br>or<br>move things out of inline.</li>
            </ol>
        </li>
    </ul>
</section>
<section>
    <h3>Cross-Site Request Forgery (CSRF)</h3>
    <ul>
        <li>Trick a user or user-agent into executing malicious requests.</li>
        <li>Hijack weak authentication measures.</li>
        <li>Repeat actions unnecessarily.</li>
    </ul>
</section>
<section>
    <h3>Cross-Site Request Forgery (CSRF)</h3>
    <ul>
        <li>Server-side ("Classic") CSRF
            <ul>
                <li>Server cannot tell if request is coming from a legitimate client/user or not.</li>
            </ul>
        </li>
        <li>Client-side CSRF
            <ul>
                <li>Legitimate Client-side JavaScript running in the authorized user's browser is tricked into sending an unwanted, or malicious request.</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>Server-Side CSRF Mitigation</h3>
    <ul>
        <li>Check <code>Referer</code> header.</li>
        <li>Request tokens
            <ul>
                <li>Most Frameworks come with this! For example, Django!</li>
                <li>Generate unique token with each GET of a HTML form.
                </li>
                <li>Send token by using a 
                    <pre><code>{% filter prexample %}
                        <input type="hidden" name="csrfToken" value="4399b92a-7a75-11ee-b962-0242ac120002">
                    {% endfilter %}</code></pre>
                </li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>Server-Side CSRF Mitigation</h3>
    <ul>
        <li>Include bearer auth with AJAX that isn't public GET.</li>
        <li>Make sure unsafe actions (actions that change state) aren't GET.
            <ul><li><code>/logout</code> should not be a GET</li></ul>
        </li>
        <li>Apply XSS prevention
            <ul>
                <li>XSS & CSRF are often combined!</li>
            </ul>
        </li>
    </ul>
</section>
<section style="font-size: 80%;">
    <h3>CSRF Mitigation</h3>
    <ul>
        <li>Naive Double-Submit Cookie
            <ol>
                <li>Server sets random cookie on first visit.</li>
                <li>When any request is made, browser always sends cookie.</li>
                <li>Also send cookie as a hidden form field or with custom header in AJAX request.
                    <ul>
                        <li>Browsers only allow custom headers to be set for same-origin requests!</li>
                    </ul>
                </li>
                <li>Server double-checks they match.</li>
            </ol>
        </li>
    </ul>
</section>
<section>
    <h3>CSRF Mitigation</h3>
    <ul>
        <li><code>Access-Control-Allow-</code> headers.
            <pre><code>{% filter prexample %}
                Access-Control-Allow-Origin: http://mobile.yoursite.com
                Access-Control-Allow-Credentials: true
                Access-Control-Allow-Headers: My-Custom-Header
            {% endfilter %}</code></pre>
        </li>
        <li><code>Access-Control-Allow-Origin: *</code> allows any origin but it cannot be sent at the same time as <code>Access-Control-Allow-Credentials: true</code>.</li>
    </ul>
</section>
{% endblock %}